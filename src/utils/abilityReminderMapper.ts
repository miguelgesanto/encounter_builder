/**
 * Ability Reminder Mapper
 * Automatically generates DM reminders from monster abilities, traits, and actions
 * Links legendary actions, lair actions, and special traits to initiative-based reminders
 */

export interface DMReminder {
  id: string;
  monsterId: string;
  monsterName: string;
  type: 'legendary' | 'lair' | 'trait' | 'reaction' | 'initiative' | 'endOfTurn';
  trigger: 'initiative20' | 'endOfTurn' | 'startOfTurn' | 'reaction' | 'always';
  priority: 'high' | 'medium' | 'low';
  title: string;
  description: string;
  abilityName: string;
  isActive: boolean;
  autoGenerated: boolean;
}

export interface AbilityKeyword {
  keyword: string;
  triggers: string[];
  priority: 'high' | 'medium' | 'low';
  reminderType: 'legendary' | 'lair' | 'trait' | 'reaction' | 'initiative' | 'endOfTurn';
}

/**
 * Keywords that trigger automatic reminder generation
 */
const ABILITY_KEYWORDS: AbilityKeyword[] = [
  // Legendary Actions
  {
    keyword: 'legendary action',
    triggers: ['endOfTurn'],
    priority: 'high',
    reminderType: 'legendary'
  },
  {
    keyword: 'legendary resistance',
    triggers: ['reaction'],
    priority: 'high',
    reminderType: 'reaction'
  },

  // Lair Actions (Initiative 20)
  {
    keyword: 'lair action',
    triggers: ['initiative20'],
    priority: 'high',
    reminderType: 'lair'
  },
  {
    keyword: 'on initiative count 20',
    triggers: ['initiative20'],
    priority: 'high',
    reminderType: 'lair'
  },

  // Regeneration and Healing
  {
    keyword: 'regeneration',
    triggers: ['startOfTurn'],
    priority: 'medium',
    reminderType: 'trait'
  },
  {
    keyword: 'regains',
    triggers: ['startOfTurn'],
    priority: 'medium',
    reminderType: 'trait'
  },

  // Recharge Abilities
  {
    keyword: 'recharge',
    triggers: ['startOfTurn'],
    priority: 'medium',
    reminderType: 'trait'
  },

  // Aura Effects
  {
    keyword: 'aura',
    triggers: ['always'],
    priority: 'medium',
    reminderType: 'trait'
  },
  {
    keyword: 'creatures within',
    triggers: ['always'],
    priority: 'medium',
    reminderType: 'trait'
  },

  // Death Effects
  {
    keyword: 'when the',
    triggers: ['reaction'],
    priority: 'high',
    reminderType: 'reaction'
  },
  {
    keyword: 'death burst',
    triggers: ['reaction'],
    priority: 'high',
    reminderType: 'reaction'
  },

  // Environmental Effects
  {
    keyword: 'difficult terrain',
    triggers: ['always'],
    priority: 'low',
    reminderType: 'trait'
  },

  // Mind Control/Charm
  {
    keyword: 'charm',
    triggers: ['endOfTurn'],
    priority: 'medium',
    reminderType: 'trait'
  },
  {
    keyword: 'dominated',
    triggers: ['endOfTurn'],
    priority: 'medium',
    reminderType: 'trait'
  },

  // Spell-like abilities
  {
    keyword: 'spellcasting',
    triggers: ['always'],
    priority: 'low',
    reminderType: 'trait'
  },

  // Pack tactics and similar
  {
    keyword: 'pack tactics',
    triggers: ['always'],
    priority: 'low',
    reminderType: 'trait'
  },
  {
    keyword: 'advantage',
    triggers: ['always'],
    priority: 'low',
    reminderType: 'trait'
  }
];

/**
 * Specific monster ability patterns for better detection
 */
const SPECIFIC_PATTERNS = [
  {
    pattern: /initiative count (\d+)/i,
    type: 'lair',
    priority: 'high',
    trigger: 'initiative20'
  },
  {
    pattern: /at the start of .*? turn/i,
    type: 'trait',
    priority: 'medium',
    trigger: 'startOfTurn'
  },
  {
    pattern: /at the end of .*? turn/i,
    type: 'trait',
    priority: 'medium',
    trigger: 'endOfTurn'
  },
  {
    pattern: /when .*? drops to 0 hit points/i,
    type: 'reaction',
    priority: 'high',
    trigger: 'reaction'
  },
  {
    pattern: /when .*? dies/i,
    type: 'reaction',
    priority: 'high',
    trigger: 'reaction'
  },
  {
    pattern: /as a reaction/i,
    type: 'reaction',
    priority: 'medium',
    trigger: 'reaction'
  }
];

/**
 * Main function to generate DM reminders from monster data
 * Now supports both legacy format and API format
 */
export function generateDMReminders(monster: any): DMReminder[] {
  const reminders: DMReminder[] = [];

  // Process legendary actions (support both formats)
  const legendaryActions = monster.legendaryActions || monster.apiData?.legendary_actions || [];
  if (legendaryActions.length > 0) {
    reminders.push({
      id: `${monster.id}-legendary`,
      monsterId: monster.id,
      monsterName: monster.name,
      type: 'legendary',
      trigger: 'endOfTurn',
      priority: 'high',
      title: `${monster.name} - Legendary Actions`,
      description: `${monster.name} can take legendary actions at the end of other creatures' turns. ${legendaryActions.length} actions available.`,
      abilityName: 'Legendary Actions',
      isActive: true,
      autoGenerated: true
    });

    // Add individual legendary actions
    legendaryActions.forEach((action: any, index: number) => {
      const actionName = action.name;
      const actionDesc = action.description || action.desc;

      reminders.push({
        id: `${monster.id}-legendary-${index}`,
        monsterId: monster.id,
        monsterName: monster.name,
        type: 'legendary',
        trigger: 'endOfTurn',
        priority: 'medium',
        title: `${actionName}`,
        description: actionDesc,
        abilityName: actionName,
        isActive: true,
        autoGenerated: true
      });
    });
  }

  // Process lair actions (support both formats)
  const lairActions = monster.lairActions || monster.apiData?.lair_actions || [];
  if (lairActions.length > 0) {
    reminders.push({
      id: `${monster.id}-lair`,
      monsterId: monster.id,
      monsterName: monster.name,
      type: 'lair',
      trigger: 'initiative20',
      priority: 'high',
      title: `${monster.name} - Lair Actions`,
      description: `On initiative count 20 (losing initiative ties), ${monster.name} can use a lair action.`,
      abilityName: 'Lair Actions',
      isActive: true,
      autoGenerated: true
    });

    // Add individual lair actions
    lairActions.forEach((action: any, index: number) => {
      const actionName = action.name;
      const actionDesc = action.description || action.desc;

      reminders.push({
        id: `${monster.id}-lair-${index}`,
        monsterId: monster.id,
        monsterName: monster.name,
        type: 'lair',
        trigger: 'initiative20',
        priority: 'medium',
        title: `Lair: ${actionName}`,
        description: actionDesc,
        abilityName: actionName,
        isActive: true,
        autoGenerated: true
      });
    });
  }

  // Process special abilities/traits (support both formats)
  const specialAbilities = monster.specialAbilities || monster.apiData?.special_abilities || [];
  if (specialAbilities.length > 0) {
    specialAbilities.forEach((ability: any, index: number) => {
      const normalizedAbility = {
        name: ability.name,
        description: ability.description || ability.desc
      };
      const generatedReminders = analyzeAbilityForReminders(normalizedAbility, monster, index);
      reminders.push(...generatedReminders);
    });
  }

  // Process reactions (support both formats)
  const reactions = monster.reactions || monster.apiData?.reactions || [];
  if (reactions.length > 0) {
    reactions.forEach((reaction: any, index: number) => {
      const reactionName = reaction.name;
      const reactionDesc = reaction.description || reaction.desc;

      reminders.push({
        id: `${monster.id}-reaction-${index}`,
        monsterId: monster.id,
        monsterName: monster.name,
        type: 'reaction',
        trigger: 'reaction',
        priority: 'medium',
        title: `Reaction: ${reactionName}`,
        description: reactionDesc,
        abilityName: reactionName,
        isActive: true,
        autoGenerated: true
      });
    });
  }

  // Process regional effects
  if (monster.regionalEffects && monster.regionalEffects.length > 0) {
    reminders.push({
      id: `${monster.id}-regional`,
      monsterId: monster.id,
      monsterName: monster.name,
      type: 'trait',
      trigger: 'always',
      priority: 'low',
      title: `${monster.name} - Regional Effects`,
      description: `Regional effects are active while ${monster.name} is present.`,
      abilityName: 'Regional Effects',
      isActive: true,
      autoGenerated: true
    });
  }

  return reminders;
}

/**
 * Analyze individual abilities to generate appropriate reminders
 */
function analyzeAbilityForReminders(ability: any, monster: any, index: number): DMReminder[] {
  const reminders: DMReminder[] = [];
  const abilityText = (ability.description || '').toLowerCase();
  const abilityName = ability.name || `Ability ${index + 1}`;

  // Check against specific patterns first
  for (const pattern of SPECIFIC_PATTERNS) {
    if (pattern.pattern.test(abilityText)) {
      reminders.push({
        id: `${monster.id}-trait-${index}-${pattern.type}`,
        monsterId: monster.id,
        monsterName: monster.name,
        type: pattern.type as any,
        trigger: pattern.trigger as any,
        priority: pattern.priority,
        title: `${abilityName}`,
        description: ability.description,
        abilityName,
        isActive: true,
        autoGenerated: true
      });
      break; // Only match the first pattern
    }
  }

  // If no specific pattern matched, check keywords
  if (reminders.length === 0) {
    for (const keyword of ABILITY_KEYWORDS) {
      if (abilityText.includes(keyword.keyword)) {
        for (const trigger of keyword.triggers) {
          reminders.push({
            id: `${monster.id}-trait-${index}-${trigger}`,
            monsterId: monster.id,
            monsterName: monster.name,
            type: keyword.reminderType,
            trigger: trigger as any,
            priority: keyword.priority,
            title: `${abilityName}`,
            description: ability.description,
            abilityName,
            isActive: true,
            autoGenerated: true
          });
        }
        break; // Only match the first keyword
      }
    }
  }

  return reminders;
}

/**
 * Filter reminders by trigger type
 */
export function filterRemindersByTrigger(reminders: DMReminder[], trigger: string): DMReminder[] {
  return reminders.filter(reminder => reminder.trigger === trigger && reminder.isActive);
}

/**
 * Get reminders for initiative count 20
 */
export function getInitiative20Reminders(reminders: DMReminder[]): DMReminder[] {
  return filterRemindersByTrigger(reminders, 'initiative20');
}

/**
 * Get reminders for end of turn
 */
export function getEndOfTurnReminders(reminders: DMReminder[], creatureId?: string): DMReminder[] {
  const endOfTurnReminders = filterRemindersByTrigger(reminders, 'endOfTurn');
  if (creatureId) {
    return endOfTurnReminders.filter(reminder => reminder.monsterId !== creatureId);
  }
  return endOfTurnReminders;
}

/**
 * Get reminders for start of turn
 */
export function getStartOfTurnReminders(reminders: DMReminder[], creatureId: string): DMReminder[] {
  return filterRemindersByTrigger(reminders, 'startOfTurn')
    .filter(reminder => reminder.monsterId === creatureId);
}

/**
 * Get always-active reminders (auras, passive effects)
 */
export function getAlwaysActiveReminders(reminders: DMReminder[]): DMReminder[] {
  return filterRemindersByTrigger(reminders, 'always');
}

/**
 * Get reaction reminders
 */
export function getReactionReminders(reminders: DMReminder[]): DMReminder[] {
  return filterRemindersByTrigger(reminders, 'reaction');
}

/**
 * Update reminder status
 */
export function toggleReminder(reminders: DMReminder[], reminderId: string): DMReminder[] {
  return reminders.map(reminder =>
    reminder.id === reminderId
      ? { ...reminder, isActive: !reminder.isActive }
      : reminder
  );
}

/**
 * Remove all reminders for a specific monster
 */
export function removeMonsterReminders(reminders: DMReminder[], monsterId: string): DMReminder[] {
  return reminders.filter(reminder => reminder.monsterId !== monsterId);
}